// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cart "github.com/nmarsollier/cartgo/internal/cart"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddArticle mocks base method.
func (m *MockService) AddArticle(userId, articleID string, quantity int) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticle", userId, articleID, quantity)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddArticle indicates an expected call of AddArticle.
func (mr *MockServiceMockRecorder) AddArticle(userId, articleID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticle", reflect.TypeOf((*MockService)(nil).AddArticle), userId, articleID, quantity)
}

// Checkout mocks base method.
func (m *MockService) Checkout(userId, token string) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", userId, token)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockServiceMockRecorder) Checkout(userId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockService)(nil).Checkout), userId, token)
}

// FindCartById mocks base method.
func (m *MockService) FindCartById(cartId string) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartById", cartId)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartById indicates an expected call of FindCartById.
func (mr *MockServiceMockRecorder) FindCartById(cartId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartById", reflect.TypeOf((*MockService)(nil).FindCartById), cartId)
}

// GetCurrentCart mocks base method.
func (m *MockService) GetCurrentCart(userId string) (*cart.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCart", userId)
	ret0, _ := ret[0].(*cart.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCart indicates an expected call of GetCurrentCart.
func (mr *MockServiceMockRecorder) GetCurrentCart(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCart", reflect.TypeOf((*MockService)(nil).GetCurrentCart), userId)
}

// ValidateCheckout mocks base method.
func (m *MockService) ValidateCheckout(cart *cart.Cart, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCheckout", cart, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCheckout indicates an expected call of ValidateCheckout.
func (mr *MockServiceMockRecorder) ValidateCheckout(cart, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCheckout", reflect.TypeOf((*MockService)(nil).ValidateCheckout), cart, token)
}
