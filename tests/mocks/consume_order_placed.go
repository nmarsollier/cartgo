// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rabbit/consume/consume_order_placed.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderPlacedConsumer is a mock of OrderPlacedConsumer interface.
type MockOrderPlacedConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPlacedConsumerMockRecorder
}

// MockOrderPlacedConsumerMockRecorder is the mock recorder for MockOrderPlacedConsumer.
type MockOrderPlacedConsumerMockRecorder struct {
	mock *MockOrderPlacedConsumer
}

// NewMockOrderPlacedConsumer creates a new mock instance.
func NewMockOrderPlacedConsumer(ctrl *gomock.Controller) *MockOrderPlacedConsumer {
	mock := &MockOrderPlacedConsumer{ctrl: ctrl}
	mock.recorder = &MockOrderPlacedConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPlacedConsumer) EXPECT() *MockOrderPlacedConsumerMockRecorder {
	return m.recorder
}

// ConsumeOrderPlaced mocks base method.
func (m *MockOrderPlacedConsumer) ConsumeOrderPlaced() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeOrderPlaced")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeOrderPlaced indicates an expected call of ConsumeOrderPlaced.
func (mr *MockOrderPlacedConsumerMockRecorder) ConsumeOrderPlaced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeOrderPlaced", reflect.TypeOf((*MockOrderPlacedConsumer)(nil).ConsumeOrderPlaced))
}
