// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rabbit/consume/consume_article_exist.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleExistConsumer is a mock of ArticleExistConsumer interface.
type MockArticleExistConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockArticleExistConsumerMockRecorder
}

// MockArticleExistConsumerMockRecorder is the mock recorder for MockArticleExistConsumer.
type MockArticleExistConsumerMockRecorder struct {
	mock *MockArticleExistConsumer
}

// NewMockArticleExistConsumer creates a new mock instance.
func NewMockArticleExistConsumer(ctrl *gomock.Controller) *MockArticleExistConsumer {
	mock := &MockArticleExistConsumer{ctrl: ctrl}
	mock.recorder = &MockArticleExistConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleExistConsumer) EXPECT() *MockArticleExistConsumerMockRecorder {
	return m.recorder
}

// ConsumeArticleExist mocks base method.
func (m *MockArticleExistConsumer) ConsumeArticleExist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeArticleExist")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeArticleExist indicates an expected call of ConsumeArticleExist.
func (mr *MockArticleExistConsumerMockRecorder) ConsumeArticleExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeArticleExist", reflect.TypeOf((*MockArticleExistConsumer)(nil).ConsumeArticleExist))
}
