// Code generated by MockGen. DO NOT EDIT.
// Source: ./rabbit/r_emit/emitter.go

// Package r_emit is a generated GoMock package.
package r_emit

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cart "github.com/nmarsollier/cartgo/cart"
)

// MockRabbitEmiter is a mock of RabbitEmiter interface.
type MockRabbitEmiter struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitEmiterMockRecorder
}

// MockRabbitEmiterMockRecorder is the mock recorder for MockRabbitEmiter.
type MockRabbitEmiterMockRecorder struct {
	mock *MockRabbitEmiter
}

// NewMockRabbitEmiter creates a new mock instance.
func NewMockRabbitEmiter(ctrl *gomock.Controller) *MockRabbitEmiter {
	mock := &MockRabbitEmiter{ctrl: ctrl}
	mock.recorder = &MockRabbitEmiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitEmiter) EXPECT() *MockRabbitEmiterMockRecorder {
	return m.recorder
}

// SendArticleValidation mocks base method.
func (m *MockRabbitEmiter) SendArticleValidation(data ArticleValidationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendArticleValidation", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendArticleValidation indicates an expected call of SendArticleValidation.
func (mr *MockRabbitEmiterMockRecorder) SendArticleValidation(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendArticleValidation", reflect.TypeOf((*MockRabbitEmiter)(nil).SendArticleValidation), data)
}

// SendPlaceOrder mocks base method.
func (m *MockRabbitEmiter) SendPlaceOrder(cart *cart.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPlaceOrder", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPlaceOrder indicates an expected call of SendPlaceOrder.
func (mr *MockRabbitEmiterMockRecorder) SendPlaceOrder(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPlaceOrder", reflect.TypeOf((*MockRabbitEmiter)(nil).SendPlaceOrder), cart)
}
