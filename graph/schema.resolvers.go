package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/nmarsollier/cartgo/cart"
	"github.com/nmarsollier/cartgo/graph/model"
	"github.com/nmarsollier/cartgo/graph/resolvers"
	"github.com/nmarsollier/cartgo/services"
)

// ValidateCart is the resolver for the validateCart field.
func (r *mutationResolver) ValidateCart(ctx context.Context) (bool, error) {
	return resolvers.ValidateCartResolver(ctx)
}

// DecrementArticle is the resolver for the decrementArticle field.
func (r *mutationResolver) DecrementArticle(ctx context.Context, articleID string) (bool, error) {
	return resolvers.DecrementArticleResolver(ctx, articleID)
}

// IncrementArticle is the resolver for the incrementArticle field.
func (r *mutationResolver) IncrementArticle(ctx context.Context, articleID string) (bool, error) {
	return resolvers.IncrementArticleResolver(ctx, articleID)
}

// RemoveArticle is the resolver for the removeArticle field.
func (r *mutationResolver) RemoveArticle(ctx context.Context, articleID string) (bool, error) {
	return resolvers.RemoveArticleResolver(ctx, articleID)
}

// AddArticle is the resolver for the addArticle field.
func (r *mutationResolver) AddArticle(ctx context.Context, data cart.AddArticleData) (bool, error) {
	return resolvers.AddArticle(ctx, data)
}

// Checkout is the resolver for the checkout field.
func (r *mutationResolver) Checkout(ctx context.Context) (bool, error) {
	return resolvers.CheckoutResolver(ctx)
}

// CurrentCart is the resolver for the currentCart field.
func (r *queryResolver) CurrentCart(ctx context.Context) (*services.CartData, error) {
	return resolvers.CurrentCartResolver(ctx)
}

// Mutation returns model.MutationResolver implementation.
func (r *Resolver) Mutation() model.MutationResolver { return &mutationResolver{r} }

// Query returns model.QueryResolver implementation.
func (r *Resolver) Query() model.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
