// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/dao.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cart "github.com/nmarsollier/cartgo/cart"
)

// MockServiceDao is a mock of ServiceDao interface.
type MockServiceDao struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDaoMockRecorder
}

// MockServiceDaoMockRecorder is the mock recorder for MockServiceDao.
type MockServiceDaoMockRecorder struct {
	mock *MockServiceDao
}

// NewMockServiceDao creates a new mock instance.
func NewMockServiceDao(ctrl *gomock.Controller) *MockServiceDao {
	mock := &MockServiceDao{ctrl: ctrl}
	mock.recorder = &MockServiceDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDao) EXPECT() *MockServiceDaoMockRecorder {
	return m.recorder
}

// CallValidate mocks base method.
func (m *MockServiceDao) CallValidate(article *cart.Article, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallValidate", article, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallValidate indicates an expected call of CallValidate.
func (mr *MockServiceDaoMockRecorder) CallValidate(article, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallValidate", reflect.TypeOf((*MockServiceDao)(nil).CallValidate), article, token)
}
